package com.csmf.controller;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.csmf.common.FileManage;
import com.csmf.common.StatusCode;
import com.csmf.dao.ISeqNoDAO;
import com.csmf.dto.ObjFileBean;
import com.csmf.dto.send.SendAllSkills;
import com.csmf.dto.send.SendCertificate;
import com.csmf.dto.send.SendEducation;
import com.csmf.dto.send.SendKill;
import com.csmf.dto.send.SendPersonInfo;
import com.csmf.dto.send.SendProject;
import com.csmf.dto.send.SendTrain;
import com.csmf.dto.send.SendWork;
import com.csmf.service.FabricService;
import com.csmf.service.PersonAllSkillService;
import com.csmf.service.PersonCertService;
import com.csmf.service.PersonCertificationService;
import com.csmf.service.PersonEducationService;
import com.csmf.service.PersonInfoService;
import com.csmf.service.PersonProjectService;
import com.csmf.service.PersonTrainService;
import com.csmf.service.PersonWorkService;
import com.csmf.service.UserRegisterService;
import com.csmf.util.DateUtil;
import com.csmf.util.RequestJsonFormat;
import com.csmf.util.ValidationUtil;

import net.sf.json.JSONObject;

@Controller
@RequestMapping("/person")
public class PersonCertificationController {

	private Log log = LogFactory.getLog(this.getClass());

	@Resource
	private UserRegisterService registerService;

	@Resource
	private PersonCertificationService personCertificationService;

	@Resource
	private ISeqNoDAO seqNoDAO;

	@Resource
	private PersonInfoService personInfoService;

	@Resource
	private PersonEducationService personEducationService;

	@Resource
	private PersonWorkService personWorkService;

	@Resource
	private PersonProjectService personProjectService;

	@Resource
	private PersonTrainService personTrainService;

	@Resource
	private PersonAllSkillService personAllSkillService;

	@Resource
	private PersonCertService personCertService;

	@Resource
	private FabricService fabricService;

	/**
	 * 个人认证信息保存
	 * 
	 * @param uploadFile
	 *            表单提交需要form标签包含enctype="multipart/form-data"的值
	 * @param request
	 *            请求服务器信息HttpServletRequest
	 * @param response
	 *            服务器返回响应信息HttpServletResponse
	 * @return void 返回类型
	 */
	@SuppressWarnings({ "unchecked", "rawtypes", "unused" })
	@RequestMapping(value = "/Certification.do", method = { RequestMethod.GET, RequestMethod.POST })
	public void personCretification(@RequestParam(value = "uploadFile", required = true) MultipartFile[] uploadFile,
			@RequestParam(value = "name") String name, @RequestParam(value = "identityNum") String identityNum,
			HttpServletRequest request, HttpServletResponse response) {
		Map resultMap = new HashMap();
		PrintWriter out = null;
		Map<String, Object> paramMap = new HashMap<String, Object>();
		List<ObjFileBean> records = new ArrayList<ObjFileBean>();
		try {
			out = response.getWriter();
			// String telPhone =
			// (String)request.getSession().getAttribute("telPhone");
			// String memberId =
			// (String)request.getSession().getAttribute("memberId");
			String telPhone = "17722848815";
			String memberId = "M000000000785";
			if (!ValidationUtil.validateIdCard(identityNum)) { // 对身份证校验
				resultMap.put("status", false);
				resultMap.put("errorMsg", "身份证格式不对");
				JSONObject obj = JSONObject.fromObject(resultMap);
				out.write(obj.toString());
				return;
			}
			if (!ValidationUtil.validateName(name)) {
				resultMap.put("status", false);
				resultMap.put("errorMsg", "名字格式不对");
				JSONObject obj = JSONObject.fromObject(resultMap);
				out.write(obj.toString());
				return;
			}
			// 保存文件并对文件名重新命名
			FileManage fileMng = new FileManage();
			Map<String, Object> fileResult = fileMng.uploadFile(uploadFile, identityNum);

			if (!(Boolean) fileResult.get("status")) {
				resultMap.put("status", false);
				resultMap.put("errorMsg", fileResult.get("errorMsg"));
				JSONObject obj = JSONObject.fromObject(resultMap);
				out.write(obj.toString());
				return;
			}
			paramMap.put("identityNum", identityNum);
			paramMap.put("name", name);
			paramMap.put("telPhone", telPhone);
			paramMap.put("memberStatus", StatusCode.CERTIFICATION_FLAG_SUCCESS);
			registerService.updateUserInfoByTelPhone(paramMap);
			Date createTime = new Date();
			if (memberId == null || "".equals(memberId)) {
				resultMap.put("status", false);
				resultMap.put("errorMsg", "会员ID为空");
				JSONObject obj = JSONObject.fromObject(resultMap);
				out.write(obj.toString());
				return;
			}
			List list = (List) fileResult.get("filePath");
			Iterator iterator = list.iterator();
			while (iterator.hasNext()) {
				ObjFileBean objFile = new ObjFileBean();
				objFile.setId(seqNoDAO.getFlwNo("PS", "F"));
				objFile.setObjId(memberId);
				objFile.setType("0");// 身份证的类型为0
				objFile.setFilePath((String) iterator.next());
				objFile.setCreateTime(createTime);
				objFile.setRemark("");
				records.add(objFile);
			}
			resultMap = personCertificationService.saveCertificationInfo(records);
		} catch (Exception e) {
			catchException(resultMap, out, e, "个人认证信息失败");
		} finally {
			if (out != null)
				out.close();
		}
	}

	/**
	 * 个人基本信息保存
	 * 
	 * @param request
	 *            请求服务器信息HttpServletRequest
	 * @param response
	 *            服务器返回响应信息HttpServletResponse
	 * @return void 返回类型
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@RequestMapping(value = "/savePersonInfo.do", method = { RequestMethod.GET, RequestMethod.POST })
	public void personInfo(HttpServletRequest request, HttpServletResponse response) {
		Map resultMap = new HashMap();
		PrintWriter out = null;
		Map<String, Object> paramMap = new HashMap<String, Object>();
		try {
			out = response.getWriter();
//			String telPhone = (String) request.getSession().getAttribute("telPhone");
//			String memberId = (String) request.getSession().getAttribute("memberId");
			String telPhone="18588270177";
			String memberId="M000000000820";
			JSONObject jsonObject = RequestJsonFormat.toJsonObject(request);
			if(jsonObject!=null){
				if(!StringUtils.isEmpty(telPhone)){//查询会员信息
					Map personMap =registerService.queryPersonInfo(telPhone);
					String finishFlag = (String) personMap.get("finishFlag");
					String flag = String.valueOf(finishFlag.charAt(0));
					if("0".equals(flag)){//为0表示还没有个人信息
						paramMap = personInfoService.validateInfo(jsonObject);
						paramMap.put("telPhone", telPhone);
						paramMap.put("memberId", memberId);
						personInfoService.savePersonInfo(paramMap);// 保存基本信息
						//将已添加个人信息的标示更新为1
						finishFlag = registerService.setFinishFlagValue(StatusCode.JSON_INFO, finishFlag);
						registerService.updateFinishFlagValue(telPhone, finishFlag);
						resultMap.put(StatusCode.STATUS, StatusCode.STATUS_OK);
						resultMap.put(StatusCode.MSG, "保存成功");
					}else{
						resultMap.put(StatusCode.STATUS, StatusCode.STATUS_FAIL);
						resultMap.put(StatusCode.MSG, "个人信息已存在，无需在添加");
					}
				}
			}
			JSONObject obj = JSONObject.fromObject(resultMap);
			out.write(obj.toString());
		} catch (Exception e) {
			catchException(resultMap, out, e, "添加个人基本信息保存失败");
		} finally {
			if (out != null)
				out.close();
		}
	}

	/**
	 * 简历中教育信息添加
	 * 
	 * @param request
	 *            请求服务器信息HttpServletRequest
	 * @param response
	 *            服务器返回响应信息HttpServletResponse
	 * @return void 返回类型
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@RequestMapping(value = "/saveEducation.do", method = { RequestMethod.GET, RequestMethod.POST })
	public void personEducation(@RequestParam(value = "uploadFile", required = true) MultipartFile[] uploadFile,
			HttpServletRequest request, HttpServletResponse response) {
		Map resultMap = null;
		PrintWriter out = null;
		Map param = new HashMap();
		try {
			out = response.getWriter();
			resultMap = new HashMap();
			String telPhone = (String) request.getSession().getAttribute("telPhone");
			String memberId = (String) request.getSession().getAttribute("memberId");
			List<ObjFileBean> records = new ArrayList<ObjFileBean>();
			JSONObject jsonObject = RequestJsonFormat.toJsonObject(request);
			String admissionTime = (String) jsonObject.get("admissionTime");
			String graduationTime = (String) jsonObject.get("graduationTime");
			String schoolName = (String) jsonObject.get("schoolName");
			String educationBackground = (String) jsonObject.get("educationBackground");
			String credentials = (String) jsonObject.get("credentials");
			String major = (String) jsonObject.get("major");
			String filePath = (String) jsonObject.get("filePath");
			/*
			 * 校验数据正确性
			 */
			if (!ValidationUtil.validateImage(filePath)) {
				resultMap.put("status", false);
				resultMap.put("errorMsg", "上传图片格式不对");
				JSONObject obj = JSONObject.fromObject(resultMap);
				out.write(obj.toString());
				return;
			}

			String id = seqNoDAO.getFlwNo("PS", "E");
			// 保存文件并对文件名重新命名
			FileManage fileMng = new FileManage();
			Map<String, Object> fileResult = fileMng.uploadFile(uploadFile, id);

			if (!(Boolean) fileResult.get("status")) {
				resultMap.put("status", false);
				resultMap.put("errorMsg", fileResult.get("errorMsg"));
				JSONObject obj = JSONObject.fromObject(resultMap);
				out.write(obj.toString());
				return;
			}

			Date createTime = DateUtil.stringToDate(DateUtil.dateToString(new Date()));
			param.put("id", id);
			param.put("memberId", memberId);
			param.put("admissionTime", createTime);
			param.put("graduationTime", createTime);
			param.put("schoolName", schoolName);
			param.put("educationBackground", educationBackground);
			param.put("credentials", credentials);
			param.put("major", major);
			param.put("createTime", createTime);
			param.put("remark", "");
			param.put("status", "0");
			param.put("update_time", createTime);
			param.put("file_id", "");
			param.put("saveFlag", "local");// 保存本地数据库
			// personCertificationService.savePersonEducationInfo(param);
			personEducationService.savePersonEducationInfo(param);
			List list = (List) fileResult.get("filePath");
			Iterator iterator = list.iterator();
			while (iterator.hasNext()) {
				ObjFileBean objFile = new ObjFileBean();
				objFile.setId(seqNoDAO.getFlwNo("CSMF", "F"));
				objFile.setObjId(memberId);
				objFile.setType("0");// 身份证的类型为0
				objFile.setFilePath((String) iterator.next());
				objFile.setCreateTime(createTime);
				objFile.setRemark("");
				records.add(objFile);
			}
			resultMap = personCertificationService.saveCertificationInfo(records);

			// 若第一次填写需要更新个人信息的finishFlag状态
			Map personMap = registerService.queryPersonInfo(telPhone);
			String finishFlag = (String) personMap.get("finishFlag");
			if ("0".equals(String.valueOf(finishFlag.charAt(1)))) {
				finishFlag = registerService.setFinishFlagValue(StatusCode.JSON_EDUCATION, finishFlag);
				registerService.updateFinishFlagValue(telPhone, finishFlag);
			}
			resultMap.put("status", true);
			JSONObject obj = JSONObject.fromObject(resultMap);
			out.write(obj.toString());
		} catch (Exception e) {
			catchException(resultMap, out, e, "添加个人教育信息失败出错");
		} finally {
			if (out != null)
				out.close();
		}
	}

	/**
	 * 简历中工作经验信息保存
	 * 
	 * @param request
	 *            请求服务器信息HttpServletRequest
	 * @param response
	 *            服务器返回响应信息HttpServletResponse
	 * @return void 返回类型
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/saveWork.do")
	public void personWork(HttpServletRequest request, HttpServletResponse response) {
		Map resultMap = new HashMap();
		PrintWriter out = null;
		try {
			out = response.getWriter();
//			String telPhone = (String) request.getSession().getAttribute("telPhone");
//			String memberId = (String) request.getSession().getAttribute("memberId");
			String telPhone="18588270177";
			String memberId="M000000000820";
			JSONObject jsonObject = RequestJsonFormat.toJsonObject(request);
			if(jsonObject!=null){
				Map<String,Object> param = personWorkService.validateInfo(jsonObject);
				param.put("memberId", memberId);
				personWorkService.savePersonWorkInfo(param);
				Map personMap = registerService.queryPersonInfo(telPhone);
				String finishFlag = (String) personMap.get("finishFlag");
				if ("0".equals(String.valueOf(finishFlag.charAt(2)))) {
					finishFlag = registerService.setFinishFlagValue(StatusCode.JSON_WORK_EXPE, finishFlag);
					registerService.updateFinishFlagValue(telPhone, finishFlag);
				}
				resultMap.put(StatusCode.STATUS, StatusCode.STATUS_OK);
				resultMap.put(StatusCode.MSG, "保存成功");
				JSONObject obj = JSONObject.fromObject(resultMap);
				out.write(obj.toString());
			}
		} catch (Exception e) {
			catchException(resultMap, out, e, "保存失败");
		} finally {
			if (out != null)
				out.close();
		}
	}

	/**
	 * 简历工作参与项目信息添加
	 * 
	 * @param request
	 *            请求服务器信息HttpServletRequest
	 * @param response
	 *            服务器返回响应信息HttpServletResponse
	 * @return void 返回类型
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/saveWorkProject.do")
	public void personWorkProject(HttpServletRequest request, HttpServletResponse response) {
		Map resultMap = new HashMap();
		PrintWriter out = null;
		try {
			out = response.getWriter();
//			String telPhone = (String) request.getSession().getAttribute("telPhone");
//			String memberId = (String) request.getSession().getAttribute("memberId");
			String telPhone="18588270177";
			String memberId="M000000000820";
			JSONObject jsonObject = RequestJsonFormat.toJsonObject(request);
			if(jsonObject!=null){
				Map<String,Object> param  = personProjectService.validateInfo(jsonObject);
				param.put("memberId", memberId);
				personProjectService.savePersonProjectInfo(param);
				Map personMap = registerService.queryPersonInfo(telPhone);
				String finishFlag = (String) personMap.get("finishFlag");
				if ("0".equals(String.valueOf(finishFlag.charAt(3)))) {
					finishFlag = registerService.setFinishFlagValue(StatusCode.JSON_PROJECT_EXPE, finishFlag);
					registerService.updateFinishFlagValue(telPhone, finishFlag);
				}
				resultMap.put(StatusCode.STATUS, StatusCode.STATUS_OK);
				resultMap.put(StatusCode.MSG, "保存成功");
				JSONObject obj = JSONObject.fromObject(resultMap);
				out.write(obj.toString());
			}
		} catch (Exception e) {
			catchException(resultMap, out, e, "项目信息保存出错");
		} finally {
			if (out != null)
				out.close();
		}
	}

	/**
	 * 简历培训添加
	 * 
	 * @param request
	 *            请求服务器信息HttpServletRequest
	 * @param response
	 *            服务器返回响应信息HttpServletResponse
	 * @return void 返回类型
	 */
	@RequestMapping("/personTrain.do")
	public void personTrain(HttpServletRequest request, HttpServletResponse response) {
		Map resultMap = new HashMap();
		PrintWriter out = null;
		Map param = new HashMap();
		try {
			out = response.getWriter();
//			String telPhone = (String) request.getSession().getAttribute("telPhone");
//			String memberId = (String) request.getSession().getAttribute("memberId");
			String telPhone="18588270177";
			String memberId="M000000000820";
			JSONObject jsonObject = RequestJsonFormat.toJsonObject(request);
			String startTime = (String) jsonObject.get("startTime");
			String endTime = (String) jsonObject.get("endTime");
			String companyName = (String) jsonObject.get("companyName");
			String trainingDescription = (String) jsonObject.get("trainingDescription");
			String trainingName = (String) jsonObject.get("trainingName");
			/*
			 * 校验数据正确性
			 */
			param.put("id", seqNoDAO.getFlwNo("PS", "T"));
			param.put("memberId", memberId);
			param.put("startTime", new Date());
			param.put("endTime", new Date());
			param.put("companyName", companyName);
			param.put("trainingDescription", trainingDescription);
			param.put("trainingName", trainingName);
			param.put("createTime", new Date());
			param.put("updateTime", new Date());
			param.put("saveFlag", "local");// 保存本地数据库
			param.put("remark", "22");
			// 用map保存便于发送有用数据json给区块链
			personTrainService.saveTrainInfo(param);

			Map personMap = registerService.queryPersonInfo(telPhone);
			String finishFlag = (String) personMap.get("finishFlag");
			if ("0".equals(String.valueOf(finishFlag.charAt(4)))) {
				finishFlag = registerService.setFinishFlagValue(StatusCode.JSON_TRAIN, finishFlag);
				registerService.updateFinishFlagValue(telPhone, finishFlag);
			}

			resultMap.put("status", true);
			JSONObject obj = JSONObject.fromObject(resultMap);
			out.write(obj.toString());
		} catch (Exception e) {
			catchException(resultMap, out, e, "项目信息保存出错");
		} finally {
			if (out != null)
				out.close();
		}
	}

	/**
	 * 简历证书添加
	 * 
	 * @param request
	 *            请求服务器信息HttpServletRequest
	 * @param response
	 *            服务器返回响应信息HttpServletResponse
	 * @return void 返回类型
	 */
	@RequestMapping("/personCert.do")
	public void personCert(@RequestParam(value = "uploadFile", required = true) MultipartFile[] uploadFile,
			HttpServletRequest request, HttpServletResponse response) {
		Map resultMap = new HashMap();
		PrintWriter out = null;
		Map param = new HashMap();
		List<ObjFileBean> records = new ArrayList<ObjFileBean>();
		try {
			out = response.getWriter();
			String telPhone = (String) request.getSession().getAttribute("telPhone");
			String memberId = (String) request.getSession().getAttribute("memberId");
			JSONObject jsonObject = RequestJsonFormat.toJsonObject(request);
			String certificateTime = (String) jsonObject.get("certificateTime");
			String name = (String) jsonObject.get("name");
			String certificateType = (String) jsonObject.get("certificateType");
			String filePath = (String) jsonObject.get("filePath");

			if (!ValidationUtil.validateImage(filePath)) {
				resultMap.put("status", false);
				resultMap.put("errorMsg", "上传图片格式不对");
				JSONObject obj = JSONObject.fromObject(resultMap);
				out.write(obj.toString());
				return;
			}
			// 保存文件并对文件名重新命名
			FileManage fileMng = new FileManage();
			String id = seqNoDAO.getFlwNo("PS", "C");
			Map<String, Object> fileResult = fileMng.uploadFile(uploadFile, id);

			if (!(Boolean) fileResult.get("status")) {
				resultMap.put("status", false);
				resultMap.put("errorMsg", fileResult.get("errorMsg"));
				JSONObject obj = JSONObject.fromObject(resultMap);
				out.write(obj.toString());
				return;
			}
			/*
			 * 校验数据正确性
			 */
			param.put("id", id);
			param.put("memberId", memberId);
			param.put("certificateTime", new Date());
			param.put("name", name);
			param.put("createTime", new Date());
			param.put("updateTime", new Date());
			param.put("saveFlag", "local");// 保存本地数据库
			param.put("remark", "");
			// 用map保存便于发送有用数据json给区块链
			personCertService.saveCertInfo(param);
			List list = (List) fileResult.get("filePath");
			Iterator iterator = list.iterator();
			while (iterator.hasNext()) {
				ObjFileBean objFile = new ObjFileBean();
				objFile.setId(seqNoDAO.getFlwNo("CSMF", "F"));
				objFile.setObjId(memberId);
				objFile.setType("0");// 身份证的类型为0
				objFile.setFilePath((String) iterator.next());
				objFile.setCreateTime(new Date());
				objFile.setRemark("");
				records.add(objFile);
			}
			resultMap = personCertificationService.saveCertificationInfo(records);
			Map personMap = registerService.queryPersonInfo(telPhone);
			String finishFlag = (String) personMap.get("finishFlag");
			if ("0".equals(String.valueOf(finishFlag.charAt(5)))) {
				finishFlag = registerService.setFinishFlagValue(StatusCode.JSON_CERT, finishFlag);
				registerService.updateFinishFlagValue(telPhone, finishFlag);
			}
			resultMap.put("status", true);
			JSONObject obj = JSONObject.fromObject(resultMap);
			out.write(obj.toString());
		} catch (Exception e) {
			catchException(resultMap, out, e, "项目信息保存出错");
		} finally {
			if (out != null)
				out.close();
		}
	}

	/**
	 * 简历自身技能添加
	 * 
	 * @param request
	 *            请求服务器信息HttpServletRequest
	 * @param response
	 *            服务器返回响应信息HttpServletResponse
	 * @return void 返回类型
	 */
	@RequestMapping("/personSkill.do")
	public void personSkill(HttpServletRequest request, HttpServletResponse response) {
		Map resultMap = new HashMap();
		PrintWriter out = null;
		Map param = new HashMap();
		try {
			out = response.getWriter();
//			String telPhone = (String) request.getSession().getAttribute("telPhone");
//			String memberId = (String) request.getSession().getAttribute("memberId");
			String telPhone="18588270177";
			String memberId="M000000000820";
			JSONObject jsonObject = RequestJsonFormat.toJsonObject(request);
			String skillType = (String) jsonObject.get("skillType");
			String skillNum = (String) jsonObject.get("skillNum");
			String Proficiency = (String) jsonObject.get("Proficiency");// 熟练度
			/*
			 * 校验数据正确性
			 */
			param.put("id", seqNoDAO.getFlwNo("PS", "S"));
			param.put("memberId", memberId);
			param.put("skillType", skillType);
			param.put("skillNum", skillNum);
			param.put("Proficiency", Proficiency);
			param.put("createTime", new Date());
			param.put("updateTime", new Date());
			param.put("saveFlag", "local");// 保存本地数据库
			param.put("remark", "");
			// 用map保存便于发送有用数据json给区块链
			personAllSkillService.savePersonSkills(param);
			Map personMap = registerService.queryPersonInfo(telPhone);
			String finishFlag = (String) personMap.get("finishFlag");
			if ("0".equals(String.valueOf(finishFlag.charAt(6)))) {
				finishFlag = registerService.setFinishFlagValue(StatusCode.JSON_ALL_SKILL, finishFlag);
				registerService.updateFinishFlagValue(telPhone, finishFlag);
			}
			resultMap.put("status", true);
			JSONObject obj = JSONObject.fromObject(resultMap);
			out.write(obj.toString());
		} catch (Exception e) {
			catchException(resultMap, out, e, "项目信息保存出错");
		} finally {
			if (out != null)
				out.close();
		}
	}

	/**
	 * 查询用户所录入的工作经验中的所有公司
	 * 
	 * @param request
	 *            请求服务器信息HttpServletRequest
	 * @param response
	 *            服务器返回响应信息HttpServletResponse
	 * @return void 返回类型
	 */
	@RequestMapping("/queryAllCompany.do")
	public void personCompany(HttpServletRequest request, HttpServletResponse response) {
		Map resultMap = new HashMap();
		PrintWriter out = null;
		try {
			out = response.getWriter();
			String telPhone = (String) request.getSession().getAttribute("telPhone");
			String memberId = (String) request.getSession().getAttribute("memberId");
			List list = personWorkService.queryCompanyById(memberId);
			resultMap.put("status", true);
			resultMap.put("resultList", list);
			JSONObject obj = JSONObject.fromObject(resultMap);
			out.write(obj.toString());
		} catch (Exception e) {
			catchException(resultMap, out, e, "项目信息保存出错");
		} finally {
			if (out != null)
				out.close();
		}
	}

	/**
	 * 查询个人简历
	 * 
	 * @param request
	 *            请求服务器信息HttpServletRequest
	 * @param response
	 *            服务器返回响应信息HttpServletResponse
	 * @return void 返回类型
	 */
	@RequestMapping("/personInfo.do")
	public void queryPersonInfo(HttpServletRequest request, HttpServletResponse response) {
		Map resultMap = new HashMap();
		PrintWriter out = null;
		try {
			out = response.getWriter();
//			String telPhone = (String) request.getSession().getAttribute("telPhone");
//			String memberId = (String) request.getSession().getAttribute("memberId");
			String telPhone="18588270177";
			String memberId="M000000000820";
			// 查询个人信息
			Map infoMap = personInfoService.queryInfoById(telPhone);
			// 查询工作经验
			List workList = personWorkService.queryAllWorkById(memberId);
			// 查询项目
			List projectList = personProjectService.queryAllProjectById(memberId);
			// 查询教育
			List educationList = personEducationService.queryAllEducationById(memberId);
			// 查询培训
			List trains = personTrainService.queryTrainById(memberId);
			// 查询证书
			List certs = personCertService.queryCertInfoById(memberId);
			// 查询技能
			List skills = personAllSkillService.querySkillById(memberId);
			Map map = new HashMap();
			map.put(StatusCode.JSON_INFO, infoMap);
			map.put(StatusCode.JSON_EDUCATION, educationList);
			map.put(StatusCode.JSON_WORK_EXPE, workList);
			map.put(StatusCode.JSON_PROJECT_EXPE, projectList);
			map.put(StatusCode.JSON_CERT, certs);
			map.put(StatusCode.JSON_TRAIN, trains);
			map.put(StatusCode.JSON_ALL_SKILL, skills);
			resultMap.put("status", true);
			resultMap.put("resultInfo", map);
			JSONObject obj = JSONObject.fromObject(resultMap);
			out.write(obj.toString());
		} catch (Exception e) {
			catchException(resultMap, out, e, "查询失败");
		} finally {
			if (out != null)
				out.close();
		}
	}

	/**
	 * 在保存简历时判断是否实名认证，如果是，就将信息发送给区块链，如果不是不做处理。
	 * 
	 * @param request
	 *            请求服务器信息HttpServletRequest
	 * @param response
	 *            服务器返回响应信息HttpServletResponse
	 * @return void 返回类型
	 */
	@RequestMapping("/sendInfo.do")
	private void SendToBlockChain(HttpServletRequest request, HttpServletResponse response) {
		Map resultMap = null;
		PrintWriter out = null;
		try {
			out = response.getWriter();
			String telPhone = (String) request.getSession().getAttribute("telPhone");
			String memberId = (String) request.getSession().getAttribute("memberId");
			// 查询个人信息
			Map infoMap = registerService.queryPersonInfo(telPhone);
			String status = (String) infoMap.get("status");
			String finishFlag = (String) infoMap.get("finishFlag");
			if (StatusCode.CERTIFICATION_FLAG_SUCCESS.equals(status)
					&& StatusCode.PERSON_RESUME_FLAG.equals(finishFlag)) {
				Map map = fabricService.packageInfo(telPhone, memberId);
				Map send = new HashMap();
				send.put("id", (String) infoMap.get("identityNum"));
				send.put("json", JSONObject.fromObject(map).toString());
				fabricService.saveResume(map);
			} 
		} catch (Exception e) {
			catchException(resultMap, out, e, "项目信息保存出错");
		} finally {
			if (out != null)
				out.close();
		}
	}

	/**
	 * 实名认证
	 * 
	 * @param request
	 *            请求服务器信息HttpServletRequest
	 * @param response
	 *            服务器返回响应信息HttpServletResponse
	 * @return void 返回类型
	 */
	@RequestMapping("/updateStatus.do")
	public void updateStatus(HttpServletRequest request, HttpServletResponse response) {
		Map resultMap = new HashMap();
		PrintWriter out = null;
		Map param = new HashMap();
		try {
			out = response.getWriter();
			String telPhone = (String) request.getSession().getAttribute("telPhone");
			String memberId = (String) request.getSession().getAttribute("memberId");
			JSONObject jsonObject = RequestJsonFormat.toJsonObject(request);
			if (jsonObject != null) {
				// String status = (String) jsonObject.get("status");
				param.put("status", "1");// 目前先默认通过
				param.put("telPhone", telPhone);
				registerService.updateStatusByTel(param);
				param.put("memberId", memberId);
				param.put("processTime", new Date());
				personCertificationService.updateInfoById(param);
				Map map = registerService.queryPersonInfo(telPhone);
				String identityNum = (String) map.get("identityNum");
				resultMap = fabricService.registerFarbric(identityNum);
				String finishFlag = (String) map.get("finishFlag");
				String sendFlag = (String) map.get("sendFlag");
				if ("ok".equals((String) resultMap.get("status")) && StatusCode.PERSON_RESUME_FLAG.equals(finishFlag)) {
					if (StatusCode.SEND_FABRIC_FALSE.equals(sendFlag)) {
						Map blockMap = fabricService.packageInfo(telPhone, memberId);
						Map send = new HashMap();
						send.put("id", (String) map.get("identityNum"));
						send.put("json", JSONObject.fromObject(blockMap).toString());
						fabricService.saveResume(map);
					}
				}
				JSONObject obj = JSONObject.fromObject(resultMap);
				out.write(obj.toString());
			}
		} catch (Exception e) {
			catchException(resultMap, out, e, "实名认证失败");
		} finally {
			if (out != null)
				out.close();
		}
	}

	private void catchException(Map result, PrintWriter out, Exception e, String message) {
		log.error(message + " : " + e);
		e.printStackTrace();
		result.put("status", false);
		result.put("errorMsg", message);
		JSONObject obj = JSONObject.fromObject(result);
		out.write(obj.toString());
	}

}