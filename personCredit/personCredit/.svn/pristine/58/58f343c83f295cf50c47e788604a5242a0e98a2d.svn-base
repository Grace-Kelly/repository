package com.csmf.service.impl;

import java.io.InputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Component;

import com.csmf.common.StatusCode;
import com.csmf.dao.CompanyAdminDao;
import com.csmf.dao.ISeqNoDAO;

import com.csmf.dto.Resume;
import com.csmf.dto.SerialNumberConfigDto;
import com.csmf.dto.send.SendAllSkills;
import com.csmf.dto.send.SendCertificate;
import com.csmf.dto.send.SendEducation;
import com.csmf.dto.send.SendKill;
import com.csmf.dto.send.SendPersonInfo;
import com.csmf.dto.send.SendProject;
import com.csmf.dto.send.SendTrain;
import com.csmf.dto.send.SendWork;
import com.csmf.resume.ResumeBase;
import com.csmf.resume.ResumePasreFactory;
import com.csmf.resume.auth.AnalysisiFactory;
import com.csmf.resume.auth.ResumeAnalysis;
import com.csmf.service.CompanyAdminService;
import com.csmf.service.FabricService;
import com.csmf.util.Base64;

import com.csmf.util.SerialNumberType;

import net.sf.json.JSONObject;




@Component("companyAdminService")
public class CompanyAdminServiceImpl implements CompanyAdminService {
	
	private Log log = LogFactory.getLog(this.getClass());
	
	@Resource
	private CompanyAdminDao companyAdminDao;
	@Resource
	ISeqNoDAO seqNoDAO;
	@Resource
	ResumePasreFactory resumePasreFactory;
	@Resource
	AnalysisiFactory analysisiFactory;
	@Resource
	FabricService fabricService;
	
	
	
	public Boolean queryComPanyIsExit(Map<String,Object> param){
		boolean flag =false;
		
		if(param!=null){
			Map<String,Object> resultMap=companyAdminDao.queryCompanyAdmin(param);		
			if(resultMap!=null && !resultMap.isEmpty()){
				flag = true;
			}
		}
		return flag;
	}
	
	
	
	
	public Map<String,Object> registerCompanyAdmin(Map<String,Object> parmams){
		Map<String,Object> result = new HashMap<String,Object>();
		//获取密码
		String passwd=(String)parmams.get("passwd");
		//获取用户名
		String personNo=(String)parmams.get("personNo");
		//企业执照名称
		String companyNo = (String) parmams.get("companyNo");
		result.put(StatusCode.STATUS, StatusCode.STATUS_FAIL);
		if (queryComPanyIsExit(parmams)){
			result.put("msg", "企业账号已经注册");
			
			return result;
		}
		parmams.put("passwd", Base64.encode(passwd.getBytes()));
		
		String eqNo;
		try {
			eqNo = seqNoDAO.getFlwNo("accountNo","COM");
			parmams.put("companyId", eqNo);
		} catch (Exception e1) {
			result.put("msg", "保存失败");
			log.error("保存用户失败", e1);
		}	
		
		try {
			companyAdminDao.saveCompanyAdmin(parmams);
			result.put("msg", "注册成功");
			result.put(StatusCode.STATUS, StatusCode.STATUS_OK);
		} catch (Exception e) {
			result.put("msg", "保存失败");
			log.error("保存用户失败", e);
		}
		return result;
	}


	public Map<String, Object> loginCompany(Map<String,Object> param) {
		
		Map<String,Object> resultMap = new HashMap<String,Object>();
		
		String password = (String) (param.get("passwd")!=null?param.get("passwd"):"");		
		//查询登陆信息
		try {
			
			if (!queryComPanyIsExit(param)){
				resultMap.put(StatusCode.MSG, "用户名不存在");
				resultMap.put(StatusCode.STATUS, StatusCode.STATUS_FAIL);
				return resultMap;
			}
			
			
			Map<String,Object> dataMap=companyAdminDao.queryCompanyAdmin(param);
			
			String passwd=(String) (dataMap.get("passwd")!=null?dataMap.get("passwd"):"");
		   	String psd = new String(Base64.decode(passwd));
			if(psd.equals(password) && password!=null && !"".equals(password)){
				resultMap.put("companyNo", dataMap.get("companyNo"));
				resultMap.put(StatusCode.MSG, "登陆成功");
				resultMap.put("personNo", dataMap.get("personNo"));
				resultMap.put("status", dataMap.get("status"));
				resultMap.put(StatusCode.STATUS, StatusCode.STATUS_OK);
			}else{
				resultMap.put(StatusCode.MSG, "密码不正确");
				resultMap.put(StatusCode.STATUS, StatusCode.STATUS_FAIL);
				return resultMap;
			}
			
		} catch (Exception e) {
			resultMap.put(StatusCode.MSG, " 系统异常");
			log.error("登陆异常",e);
		}
		return resultMap;
	}

	public Map<String,Object> getJsonStr(){
		SendPersonInfo personInfo = new SendPersonInfo();
		personInfo.setName("何福暖");
		personInfo.setIdentityNum("350322199301161154");
		personInfo.setBornDate("1993/06/28");
		personInfo.setOrigin("001");
		personInfo.setGender("M");
		personInfo.setHighestEducation("本科");
		personInfo.setPolitical("5001");
		personInfo.setNation("00");
		personInfo.setMarry("F");
		
		
		List<SendWork> works = new ArrayList<SendWork>();
		SendWork work = new SendWork();
		work.setDimissionTime("2017/02/02");
		work.setEntryTime("2015/5");
		work.setCompanName("文思海辉系统有限公司");
		work.setPosition("软件工程师");
		work.setTrade("计算机软件");
		work.setWorkDescription(("负责前后台开发与设计"));
		work.setDepartment("金融事业部");
		works.add(work);
		
		work.setDimissionTime("2015/4");
		work.setEntryTime("2014/5");
		work.setCompanName("惠州风云软件科技有限公司");
		work.setPosition("软件工程");
		work.setTrade("计算机软件");
		work.setWorkDescription(("负责web项目的后端开发与设计"));
		work.setDepartment("开发部");
		works.add(work);
		
		List<SendProject> projects = new ArrayList<SendProject>();
		SendProject project = new SendProject();
		project.setProjectName("平安信用险融资在线管理平台");
		project.setProjectBeginTime("2016/1");
		project.setProjectEndTime("2017/02/02");
		project.setProjectDescription("本人担任项目中的组长职位，负责人员安排以及项目进度的把控并负责部分模块的开发");
		project.setCompanyName("companyName");
		project.setResponsibility("本人担任项目中的组长职位，负责人员安排以及项目进度的把控并负责部分模块的开发");
		List<SendKill> skillList = new ArrayList<SendKill>();
		for(int i=199;i<204;i++){
			SendKill skill = new SendKill();
			skill.setSkillDataNum("skill"+i);
			skill.setSkillDataType("type"+i);
			skillList.add(skill);
		}
		project.setSkillId(skillList);
		project.setWorkId("workId");
		projects.add(project);
		projects.add(project);
		
		// 查询教育并封装成bean
		List<SendEducation> educations = new ArrayList<SendEducation>();
		SendEducation education = new SendEducation();
		education.setAdmissionTime("2017/02/02");
		education.setCredentials("credentials");
		education.setEducationBackground("educationBackground");
		education.setGraduationTime("2017/02/02");
		education.setMajor("major");
		education.setSchoolName("schoolName");
		//education.setStatus('T');
		educations.add(education);
		
		List<SendTrain> trains = new ArrayList<SendTrain>();
		SendTrain train = new SendTrain();
		train.setCompanName("companName");
		train.setStartTime("2017/02/02");
		train.setEndTime("2017/02/02");
		train.setTrainingDescription("trainingDescription");
		train.setTrainingName("trainingName");
		trains.add(train);
		
		
		List<SendCertificate> certs = new ArrayList<SendCertificate>();
		SendCertificate cert = new SendCertificate();
		cert.setCertificateTime("2017/02/02");
		cert.setCertificateType("certificateType");
		cert.setName("name");
		certs.add(cert);
		
		List<SendAllSkills> skills = new ArrayList<SendAllSkills>();
		SendAllSkills skill = new SendAllSkills();
		skill.setProficiency("proficiency");
		skill.setSkillNum("skillNum");
		skill.setSkillType("skillType");
		skills.add(skill);
		
		Map map = new HashMap();
		map.put(StatusCode.JSON_INFO, personInfo);
		map.put(StatusCode.JSON_EDUCATION, educations);
		map.put(StatusCode.JSON_WORK_EXPE, works);
		map.put(StatusCode.JSON_PROJECT_EXPE, projects);
		map.put(StatusCode.JSON_ALL_SKILL, skills);
		map.put(StatusCode.JSON_TRAIN, trains);
		map.put(StatusCode.JSON_CERT, certs);
		
		JSONObject obj = JSONObject.fromObject(map);
		
		
		FabricServiceImpl impl = new FabricServiceImpl();
		Map resultMap = impl.BlockChainToMap(obj.toString());
		JSONObject obj1 = JSONObject.fromObject(resultMap);
		return resultMap;
	}
	
	
	
	public List<Map<String, Object>> resumeAnalysis(InputStream in,String type,String id,String login) {
		Map<String,String> resumeType = StatusCode.RESUMETYPE;
		List<String> list = StatusCode.RESUMEANALYSIS;
		List<Map<String,Object>> resultList = new ArrayList<Map<String,Object>>();
		try {
			
			for(Map.Entry<String, String> entry:resumeType.entrySet()){
				  if(entry.getKey().equals(type)){
					  ResumeBase pasreResume =resumePasreFactory.createResumePasre(entry.getValue());
					  if(pasreResume!=null){
						 Resume resume = pasreResume.parseDoc(in);
						 String name = resume.getName();
						 String tel = resume.getTel();
						 Map<String,Object> param = new HashMap<String,Object>();
						 //根据信息查询匹配简历
						 String idNum = "";
						 if (!"".equals(id) && id!=null ){
							 param.put("id", id);
							 idNum = id;
						 }else{
							 param.put("name", name);
							 param.put("tel", tel);
						 }
						Map<String,Object> rMap = companyAdminDao.queryMermberIDBy(param);
						
						if(rMap!=null){
							idNum = (String) rMap.get("idNum");
						}						
																								
						Map<String,Object> datail = fabricService.queryFabricResume(idNum,login);
						
						 for (String string : list) {
							 ResumeAnalysis analysis = analysisiFactory.newInstince(string);
							 if(datail!=null){
								 Map<String,Object> data = analysis.analysis(resume, datail);
								 if(data!=null){
									 resultList.add(data);
								 }
							 }
						}
					  }else{
						  log.info("简历解析模版不存在:type="+type);
					  }
				  }
			}
		} catch (Exception e) {
			log.error("解析简历异常，简历模版为"+type, e);
		}
		return resultList;
	}
	
	
	
	
	
//	/**
//	 * 分页查询部门信息
//	 */
//	public Map queryOrgInfoByPage(Map param) throws Exception {
//		Map result = new HashMap();
//		List list = new ArrayList();
//		int totalNum = companyAdminDao.selectOrgInfoTotalNum();
//		if(totalNum >= 0){
//			Map map = PagingUtil.getPaging((String) param.get("currPageSize"));
//			param.put("startRow", map.get("startRow"));
//			param.put("endRow", map.get("endRow"));
//			list = companyAdminDao.selectPositionInfoByPage(param);
//		}
//		result.put("status", true);
//		result.put("errorMsg", "查询成功！");
//		result.put("totalNum", totalNum);
//		result.put("data", list);
//		return result;
//	}
//	
//	/**
//	 * 查询部门详情
//	 */
//	public Map queryOrgInfo(Map param) throws Exception {
//		Map result = new HashMap();
//		result = companyAdminDao.selectOrgInfo(param);
//		result.put("status", true);
//		result.put("errorMsg", "查询成功！");
//		return result;
//	}
//
//
//	/**
//	 * 保存部门信息
//	 */
//	public Map saveOrgInfo(Map param) throws Exception {
//		Map result = new HashMap();
//		companyAdminDao.insertOrgInfo(param);
//		result.put("status", true);
//		result.put("errorMsg", "保存部门成功！");
//		return result;
//	}
//
//	/**
//	 * 修改部门信息
//	 */
//	public Map updateOrgInfo(Map param) throws Exception {
//		Map result = new HashMap();
//		companyAdminDao.updateOrgInfo(param);
//		result.put("status", true);
//		result.put("errorMsg", "修改部门成功！");
//		return result;
//	}
//
//
//
//
//	public Map queryPositionInfoByPage(Map param) throws Exception {
//		// TODO Auto-generated method stub
//		return null;
//	}
//	
//	
//	public Map queryPositionInfo(Map param) throws Exception {
//		Map result = new HashMap();
//		result = companyAdminDao.selectPositionInfo(param);
//		result.put("status", true);
//		result.put("errorMsg", "查询成功！");
//		return result;
//	}
//
//
//	public Map savePositionInfo(Map param) throws Exception {
//		Map result = new HashMap();
//		companyAdminDao.insertPositionInfo(param);
//		result.put("status", true);
//		result.put("errorMsg", "保存职位成功！");
//		return result;
//	}
//
//
//
//
//	public Map updatePositionInfo(Map param) throws Exception {
//		Map result = new HashMap();
//		companyAdminDao.updatePositionInfo(param);
//		result.put("status", true);
//		result.put("errorMsg", "修改职位成功！");
//		return result;
//	}
//	
//	//获取流水
//	public String getFlowNo(String defaultValue, int length, String seqNoName) throws Exception{
//		SerialNumberConfigDto config = new SerialNumberConfigDto();
//		    config.setDefaultValue(defaultValue);
//		    config.setLength(length);
//		    config.setSeqNoName(seqNoName);
//		    config.setType(SerialNumberType.NULL);
//		    String flowNo = seqNoDao.getFlwNo(config);
//		    return flowNo;
//	}


}
